{"version":3,"file":"main.js","mappings":"MAAA,MAAMA,EAAM,CACVC,cAAeC,SAASC,cAAc,aACtCC,aAAcF,SAASC,cAAc,kBACrCE,aAAcH,SAASC,cAAc,mBACrCG,UAAWJ,SAASC,cAAc,eAClCI,OAAQL,SAASC,cAAc,YAC/BK,WAAYN,SAASC,cAAc,iBACnCM,MAAOP,SAASC,cAAc,WAC9BO,YAAaR,SAASC,cAAc,uBACpCQ,OAAQT,SAASC,cAAc,iBAC/BS,MAAOV,SAASC,cAAc,WAC9BU,UAAWX,SAASC,cAAc,eAClCW,UAAWZ,SAASC,cAAc,gBAEpC,IAAIY,EAAU,IA0Dd,SAASC,IAKP,GAJiBhB,EAAIS,MAAMQ,YAAYC,OACrClB,EAAIS,MAAMQ,YAAYE,OAAS,IAGjBJ,EAAS,OAEzB,MAAMK,EAAUpB,EAAIS,MAAMQ,YAAYI,MAAM,GAAI,GAAGC,OAC7CC,EAAUC,WAAWJ,GACrBK,EAAOC,EAAWX,EAASQ,GAASI,QAAQ,GAClD3B,EAAIQ,WAAWS,YAAc,gBAC7BjB,EAAIS,MAAMQ,YAAcQ,EAAOV,EAE/B,MAAMa,EAAW5B,EAAIW,OAAOM,YAAYI,MAAM,GAAI,GAAGC,OAC/CO,EAAWL,WAAWI,GACtBE,EAAQJ,EAAWX,EAASc,GAAUF,QAAQ,GACpD3B,EAAIU,YAAYO,YAAc,eAC9BjB,EAAIW,OAAOM,YAAca,EAAQf,CACnC,CAEA,SAASW,EAAWX,EAASQ,GAC3B,IAAIE,EAAOF,EAMX,OAJEE,EADa,KAAXV,EACa,EAAPU,EAAY,EAAI,GAEF,GAAbA,EAAO,IAAW,EAEtBA,CACT,CApFAzB,EAAIK,aAAa0B,iBAAiB,SAAS,KACrBhB,EAAL,KAAXA,EAA0B,IACf,IACfC,GAAe,IAGjBhB,EAAII,aAAa2B,iBAAiB,SAOlCC,eAA8BC,GAC5BA,EAAEC,iBACF,MAAMC,EAAWnC,EAAIC,cAAcmC,MACnC,IACE,MAAMC,EAAY,IAAIC,KAEhBC,QAAgBC,MACpB,oFAAoFL,IACpF,CAAEM,KAAM,SAGJC,QAAiBH,EAAQI,QAhBnC,SAA0BC,EAAIC,GAC5B,MAAMC,GAiBY,IAAIR,MAjBNS,UAAYH,EAAGG,UAC/B/C,EAAIc,UAAUG,YAAc,2BAA6B6B,EAAO,IAClE,CAgBIE,CAAiBX,GAQrB,SAAyBY,GACvB,MAAMC,EAAUD,EAAKd,SAASe,QACxBC,EAASF,EAAKd,SAASgB,OACvBC,EAAQH,EAAKI,QAAQC,UAAUC,KAC/BC,EAAcP,EAAKI,QAAQG,YAC3BC,EAAWR,EAAKI,QAAQI,SACxBC,EAAST,EAAKI,QAAQK,OACtBC,EAAWV,EAAKI,QAAQM,SAE9B3D,EAAIM,UAAUW,YAAciC,EAAU,KAAOC,EAC7CnD,EAAIO,OAAOU,YAAcmC,EACzBpD,EAAIQ,WAAWS,YAAc,gBAC7BjB,EAAIS,MAAMQ,YAAcyC,EAAS,IACjC1D,EAAIU,YAAYO,YAAc,cAC9BjB,EAAIW,OAAOM,YAAcuC,EAAc,IACvCxD,EAAIa,UAAUI,YAAc,aAAewC,EAC3CzD,EAAIY,MAAMK,YAAc,SAAW0C,EAAW,OAE9C3C,GACF,CAzBI4C,CAAgBlB,EAClB,CAAE,MAAOmB,GACPC,QAAQC,IAAIF,EACd,CACF,G","sources":["webpack://odin-weather-app/./src/index.js"],"sourcesContent":["const elm = {\n  inputLocation: document.querySelector(\"#location\"),\n  submitButton: document.querySelector(\"#submit-button\"),\n  toggleButton: document.querySelector(\"#deg-cel-button\"),\n  wLocation: document.querySelector(\"#w-location\"),\n  wCloud: document.querySelector(\"#w-cloud\"),\n  wTempLabel: document.querySelector(\"#w-temp-label\"),\n  wTemp: document.querySelector(\"#w-temp\"),\n  wFeelsLabel: document.querySelector(\"#w-feels-like-label\"),\n  wFeels: document.querySelector(\"#w-feels-like\"),\n  wWind: document.querySelector(\"#w-wind\"),\n  wHumidity: document.querySelector(\"#w-humidity\"),\n  timeTaken: document.querySelector(\"#time-taken\"),\n};\nlet degrees = \"c\";\n\nelm.toggleButton.addEventListener(\"click\", () => {\n  if (degrees == \"c\") degrees = \"f\";\n  else degrees = \"c\";\n  updateDegrees();\n});\n\nelm.submitButton.addEventListener(\"click\", getWeatherData);\n\nfunction displayTimeTaken(t1, t2) {\n  const time = t2.getTime() - t1.getTime();\n  elm.timeTaken.textContent = \"Time taken to get date: \" + time + \"ms\";\n}\n\nasync function getWeatherData(e) {\n  e.preventDefault();\n  const location = elm.inputLocation.value;\n  try {\n    const startTime = new Date();\n\n    const apiData = await fetch(\n      `https://api.weatherapi.com/v1/current.json?key=0cf9d4e479044f7a871142421232710&q=${location}`,\n      { mode: \"cors\" }\n    );\n\n    const jsonData = await apiData.json();\n\n    const endTime = new Date();\n    displayTimeTaken(startTime, endTime);\n\n    sortWeatherData(jsonData);\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction sortWeatherData(data) {\n  const country = data.location.country;\n  const region = data.location.region;\n  const cloud = data.current.condition.text;\n  const feelslike_c = data.current.feelslike_c;\n  const humidity = data.current.humidity;\n  const temp_c = data.current.temp_c;\n  const wind_mph = data.current.wind_mph;\n\n  elm.wLocation.textContent = country + \", \" + region;\n  elm.wCloud.textContent = cloud;\n  elm.wTempLabel.textContent = \"Temperature: \";\n  elm.wTemp.textContent = temp_c + \"c\";\n  elm.wFeelsLabel.textContent = \"feels like \";\n  elm.wFeels.textContent = feelslike_c + \"c\";\n  elm.wHumidity.textContent = \"Humidity: \" + humidity;\n  elm.wWind.textContent = \"Wind: \" + wind_mph + \" mph\";\n\n  updateDegrees();\n}\n\nfunction updateDegrees() {\n  const currentD = elm.wTemp.textContent.charAt(\n    elm.wTemp.textContent.length - 1\n  );\n\n  if (currentD == degrees) return;\n\n  const tempStr = elm.wTemp.textContent.slice(0, -1).trim();\n  const tempNum = parseFloat(tempStr);\n  const temp = convertToF(degrees, tempNum).toFixed(1);\n  elm.wTempLabel.textContent = \"Temperature: \";\n  elm.wTemp.textContent = temp + degrees;\n\n  const feelsStr = elm.wFeels.textContent.slice(0, -1).trim();\n  const feelsNum = parseFloat(feelsStr);\n  const feels = convertToF(degrees, feelsNum).toFixed(1);\n  elm.wFeelsLabel.textContent = \"feels like: \";\n  elm.wFeels.textContent = feels + degrees;\n}\n\nfunction convertToF(degrees, tempNum) {\n  let temp = tempNum;\n  if (degrees == \"f\") {\n    temp = (temp * 9) / 5 + 32;\n  } else {\n    temp = ((temp - 32) * 5) / 9;\n  }\n  return temp;\n}\n"],"names":["elm","inputLocation","document","querySelector","submitButton","toggleButton","wLocation","wCloud","wTempLabel","wTemp","wFeelsLabel","wFeels","wWind","wHumidity","timeTaken","degrees","updateDegrees","textContent","charAt","length","tempStr","slice","trim","tempNum","parseFloat","temp","convertToF","toFixed","feelsStr","feelsNum","feels","addEventListener","async","e","preventDefault","location","value","startTime","Date","apiData","fetch","mode","jsonData","json","t1","t2","time","getTime","displayTimeTaken","data","country","region","cloud","current","condition","text","feelslike_c","humidity","temp_c","wind_mph","sortWeatherData","err","console","log"],"sourceRoot":""}